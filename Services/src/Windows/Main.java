/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Windows;

import static java.awt.SystemColor.info;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author josue
 */
public class Main extends javax.swing.JFrame {

    private int cA;
    private int cI;
    private int cC;
    private String public_key_path;
    private String private_key_path;
    private String file_path;
    private final static String path_mensaje = "C:\\Users\\josue\\Documents\\Criptography\\Services\\Mensajes";
    private final static String path_llaves = "C:\\Users\\josue\\Documents\\Criptography\\Services\\Llaves";
    
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        SELECT_KEY.setVisible(false);
        SELECT_KEY1.setVisible(false);
        Verify.setVisible(false);
        Select_key.setVisible(false);
        Select_key1.setVisible(false);
        jComboBox1.setVisible(false);
        SET_KEY.setVisible(false);
        SEL_ALGORITHM.setVisible(false);
        B1.setVisible(false);
        B2.setVisible(false);
        B3.setVisible(false);
        Encrypt.setVisible(false);
        Decrypt.setVisible(false);
        CreateHash.setVisible(false);
        Create_hash.setVisible(false);
        verify.setVisible(false);
        Cypher.setVisible(false);
        Check.setVisible(false);
        this.cA=1;
        this.cI=1;
        this.cC=1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Name1 = new javax.swing.JLabel();
        Name2 = new javax.swing.JLabel();
        SELECT_FILE = new javax.swing.JLabel();
        Select = new javax.swing.JButton();
        I = new javax.swing.JRadioButton();
        A = new javax.swing.JRadioButton();
        C = new javax.swing.JRadioButton();
        Encrypt = new javax.swing.JRadioButton();
        Decrypt = new javax.swing.JRadioButton();
        Select_services = new javax.swing.JLabel();
        SELECT_KEY1 = new javax.swing.JLabel();
        SELECT_KEY = new javax.swing.JLabel();
        Verify = new javax.swing.JButton();
        CreateHash = new javax.swing.JButton();
        verify = new javax.swing.JRadioButton();
        Create_hash = new javax.swing.JRadioButton();
        Select_key = new javax.swing.JButton();
        Select_key1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        BG2 = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();
        SET_KEY = new javax.swing.JTextField();
        SEL_ALGORITHM = new javax.swing.JLabel();
        B1 = new javax.swing.JLabel();
        B2 = new javax.swing.JLabel();
        B3 = new javax.swing.JLabel();
        Cypher = new javax.swing.JButton();
        Check = new javax.swing.JButton();
        BG1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Name1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        Name1.setForeground(new java.awt.Color(255, 255, 255));
        Name1.setText("Ruíz Hernández Josué");
        getContentPane().add(Name1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        Name2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        Name2.setForeground(new java.awt.Color(255, 255, 255));
        Name2.setText("Jiménez Sánchez Alan David");
        getContentPane().add(Name2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, -1));

        SELECT_FILE.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        SELECT_FILE.setForeground(new java.awt.Color(255, 255, 255));
        SELECT_FILE.setText("Please, select your file");
        getContentPane().add(SELECT_FILE, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, -1, -1));

        Select.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Select.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        Select.setText("Select file");
        Select.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Select.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });
        getContentPane().add(Select, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, 170, 40));

        I.setBackground(new java.awt.Color(76, 207, 224));
        I.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        I.setForeground(new java.awt.Color(255, 255, 255));
        I.setText("Integrity");
        I.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IMouseClicked(evt);
            }
        });
        I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IActionPerformed(evt);
            }
        });
        getContentPane().add(I, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, -1, -1));

        A.setBackground(new java.awt.Color(76, 207, 224));
        A.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        A.setForeground(new java.awt.Color(255, 255, 255));
        A.setText("Authenticity");
        A.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AMouseClicked(evt);
            }
        });
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });
        getContentPane().add(A, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, -1, -1));

        C.setBackground(new java.awt.Color(76, 207, 224));
        C.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        C.setForeground(new java.awt.Color(255, 255, 255));
        C.setText("Confidentiality");
        C.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CMouseClicked(evt);
            }
        });
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });
        getContentPane().add(C, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, -1, -1));

        Encrypt.setBackground(new java.awt.Color(255, 255, 255));
        Encrypt.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Encrypt.setText("Encrypt");
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });
        getContentPane().add(Encrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 120, -1, -1));

        Decrypt.setBackground(new java.awt.Color(255, 255, 255));
        Decrypt.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Decrypt.setText("Decrypt");
        Decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptActionPerformed(evt);
            }
        });
        getContentPane().add(Decrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, -1, -1));

        Select_services.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        Select_services.setForeground(new java.awt.Color(255, 255, 255));
        Select_services.setText("Select the services that you want ");
        getContentPane().add(Select_services, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, -1, -1));

        SELECT_KEY1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        SELECT_KEY1.setForeground(new java.awt.Color(255, 255, 255));
        SELECT_KEY1.setText("Please, select the key");
        getContentPane().add(SELECT_KEY1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, -1, -1));

        SELECT_KEY.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        SELECT_KEY.setText("Select your private key");
        getContentPane().add(SELECT_KEY, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 380, -1, -1));

        Verify.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Verify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        Verify.setText("Verify");
        Verify.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Verify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerifyActionPerformed(evt);
            }
        });
        getContentPane().add(Verify, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 220, 170, 40));

        CreateHash.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        CreateHash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        CreateHash.setText("Create hash");
        CreateHash.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CreateHash.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CreateHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateHashActionPerformed(evt);
            }
        });
        getContentPane().add(CreateHash, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 220, 170, 40));

        verify.setBackground(new java.awt.Color(255, 255, 255));
        verify.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        verify.setText("Verify hash");
        verify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                verifyMouseClicked(evt);
            }
        });
        verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyActionPerformed(evt);
            }
        });
        getContentPane().add(verify, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, -1, -1));

        Create_hash.setBackground(new java.awt.Color(255, 255, 255));
        Create_hash.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Create_hash.setText("Create the hash");
        Create_hash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Create_hashMouseClicked(evt);
            }
        });
        Create_hash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Create_hashActionPerformed(evt);
            }
        });
        getContentPane().add(Create_hash, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, -1, -1));

        Select_key.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Select_key.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        Select_key.setText("Select key");
        Select_key.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Select_key.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Select_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_keyActionPerformed(evt);
            }
        });
        getContentPane().add(Select_key, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 170, 40));

        Select_key1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Select_key1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        Select_key1.setText("Select key");
        Select_key1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Select_key1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Select_key1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_key1ActionPerformed(evt);
            }
        });
        getContentPane().add(Select_key1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 370, 170, 40));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AES", "DES" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, 60, 20));

        BG2.setBackground(new java.awt.Color(77, 208, 225));
        BG2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background1.png"))); // NOI18N
        getContentPane().add(BG2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 428, -1));

        Exit.setBackground(new java.awt.Color(255, 255, 255));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/exit.png"))); // NOI18N
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        getContentPane().add(Exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 0, 30, 30));

        SET_KEY.setToolTipText("hola");
        getContentPane().add(SET_KEY, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 120, 190, 30));

        SEL_ALGORITHM.setBackground(new java.awt.Color(76, 207, 224));
        SEL_ALGORITHM.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        SEL_ALGORITHM.setText("Select the algorithm");
        getContentPane().add(SEL_ALGORITHM, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, -1, -1));

        B1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        B1.setText("Because of you select authenticity");
        getContentPane().add(B1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, -1, -1));

        B2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        B2.setText("Because of you select integrity");
        getContentPane().add(B2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 180, -1, -1));

        B3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        B3.setText("Because of you select confidentiality");
        getContentPane().add(B3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 300, -1, -1));

        Cypher.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Cypher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        Cypher.setText("Do cypher");
        Cypher.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Cypher.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Cypher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CypherActionPerformed(evt);
            }
        });
        getContentPane().add(Cypher, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 440, 170, 40));

        Check.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Check.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        Check.setText("Check");
        Check.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Check.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckActionPerformed(evt);
            }
        });
        getContentPane().add(Check, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 440, 170, 40));

        BG1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/white.jpg"))); // NOI18N
        getContentPane().add(BG1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 570, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void IActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IActionPerformed

    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
    // TODO add your handling code here:
    }//GEN-LAST:event_AActionPerformed

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CActionPerformed

    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptActionPerformed
        
    }//GEN-LAST:event_EncryptActionPerformed

    public String encryptMessage(int i) throws IOException, Exception
    {
        String message,encrypted;
         
        message = Archivo.leerArchivo(getFilePath());
        if(i==1)
           encrypted = AES.encrypt(SET_KEY.getText(),message);
        else
            encrypted = DES.encrypt(SET_KEY.getText(),message);
       
        return encrypted;
    }
    
    private void DecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DecryptActionPerformed

    private void Select_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_keyActionPerformed
        setPublicKeyPath(Archivo.rute(path_llaves,"Select key","key"));
    }//GEN-LAST:event_Select_keyActionPerformed

    private void Select_key1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_key1ActionPerformed
        setPrivateKeyPath(Archivo.rute(path_llaves,"Select key","key"));
    }//GEN-LAST:event_Select_key1ActionPerformed

    private void CMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CMouseClicked
        if((cA%2)!=0)
        {
            B1.setVisible(true);
            SEL_ALGORITHM.setVisible(true);
            SET_KEY.setVisible(true);
            Encrypt.setVisible(true);
            Decrypt.setVisible(true);
            SELECT_KEY1.setVisible(true);
            Select_key.setVisible(true);
            jComboBox1.setVisible(true);
            Cypher.setVisible(true);
            Check.setVisible(true);
            this.cA+=1;
        }
        else
        {
            B1.setVisible(false);
            SEL_ALGORITHM.setVisible(false);
            SET_KEY.setVisible(false);
            Encrypt.setVisible(false);
            Decrypt.setVisible(false);
            SELECT_KEY1.setVisible(false);
            Select_key.setVisible(false);
            jComboBox1.setVisible(false);
            this.cA+=1;
        }
    }//GEN-LAST:event_CMouseClicked

    private void IMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IMouseClicked
        if((this.cI%2)!=0)
        {
            B2.setVisible(true);
            Create_hash.setVisible(true);
            verify.setVisible(true);
            this.cI+=1;
        }
        else
        {
            B2.setVisible(false);
            Create_hash.setVisible(false);
            verify.setVisible(false);
            this.cI+=1;
        }
        
        if(!C.isSelected() && !A.isSelected())
            Cypher.setVisible(false);
        
    }//GEN-LAST:event_IMouseClicked

    private void AMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AMouseClicked
        if((this.cC%2)!=0)
        {
            JOptionPane.showMessageDialog(null,"If you select authenticity you dont have to do anything in the part of integrity");
            B3.setVisible(true);
            SELECT_KEY.setVisible(true);
            Select_key1.setVisible(true);
            Create_hash.setVisible(true);
            verify.setVisible(true);
            Cypher.setVisible(true);
            Check.setVisible(true);
            this.cC+=1;
            I.setSelected(true);
            B2.setVisible(true);
            if(I.isSelected())
                this.cI+=1;
        }
        else
        {
            B3.setVisible(false);
            SELECT_KEY.setVisible(false);
            Select_key1.setVisible(false);
            this.cC+=1;
            Create_hash.setVisible(false);
            verify.setVisible(false);
        }        
    }//GEN-LAST:event_AMouseClicked

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        setFilePath(Archivo.rute("C:\\Users\\josue\\Documents\\Criptography\\Services\\Mensajes", "Select file", "txt"));
    }//GEN-LAST:event_SelectActionPerformed

    public String ciframe(String text,int option) throws Exception
    {
        String msg=null;
        if(option==0)
        {
           if(SET_KEY.getText().length()>16)
            JOptionPane.showMessageDialog(null,"Sorry, the key´s length must be of 16 characters or less");
           else
            msg =  AES.encrypt(SET_KEY.getText(),text);
        }
        else
        {
           if(SET_KEY.getText().length()>8)
                JOptionPane.showMessageDialog(null,"Sorry, the key´s length must be of 8 characters or less");
           else
                msg = DES.encrypt(SET_KEY.getText(),text);
        }
        return msg;
    }
    
    public void escribemeArchivo(String mensaje,int i)
    {
        try {
                Archivo.escribirArchivo(mensaje, getNameSalida(i));
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    public String getCypherKey() throws Exception
    {
        String cypher_key=null;
        try {
                cypher_key = Arrays.toString(RSA.encrypt(RSA.cargarPublica(getPublicKeyPath()),SET_KEY.getText()));
            } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        return cypher_key;
    }
    
    private void CypherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CypherActionPerformed
        String message = null;
        try {
             message = Archivo.leerArchivo(getFilePath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        String cypher_message=null;
        String cypher_key=null;
        String hash;
        String cypher_hash=null;
        int i = 0;
        
        if(C.isSelected() && !I.isSelected() && !A.isSelected())
        {
            String new_message;
            try {
                if(jComboBox1.getSelectedIndex()==0)
                {
                    cypher_message = ciframe(message,0);
                    i=1;
                }
                    
                else
                {
                    cypher_message = ciframe(message,1);
                    i=2;
                }
                    
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                cypher_key = getCypherKey();
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            new_message = cypher_message+'\n';
            new_message += cypher_key+'\n';
            
            escribemeArchivo(new_message,i);
            
            JOptionPane.showMessageDialog(null,"We´ve ended");
        }
        
        if(C.isSelected() && I.isSelected() && !A.isSelected())
        {
            hash = Hash.getSha(message);
            message += '\n'+hash;
            
            try {
                if(jComboBox1.getSelectedIndex()==0)
                {
                    cypher_message = ciframe(message,0);
                    i=1;
                }
                    
                else
                {
                    cypher_message = ciframe(message,1);
                    i=2;
                }
                    
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
             try {
                cypher_key = getCypherKey();
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            String new_message;
            new_message = cypher_message+'\n';
            new_message += cypher_key+'\n';
            
            escribemeArchivo(new_message,i);
            JOptionPane.showMessageDialog(null,"We´ve ended");
        }
        
        if(!C.isSelected() && A.isSelected() && I.isSelected())
        {
            hash = Hash.getSha(message);
            try {
                cypher_hash = Arrays.toString(RSA.encrypt(RSA.cargarPrivada(getPrivateKeyPath()),hash));
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            String new_message=message+'\n'+cypher_hash;
            
            escribemeArchivo(new_message,5);
            JOptionPane.showMessageDialog(null,"We´ve ended");
        }
        
        if(C.isSelected() && A.isSelected() && I.isSelected())
        {
         hash = Hash.getSha(message);
         String cypher_sha=null;
            try {
                cypher_sha = Arrays.toString(RSA.encrypt(RSA.cargarPrivada(getPrivateKeyPath()), hash));
            } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            message+='\n'+cypher_sha;
            try {
                if(jComboBox1.getSelectedIndex()==0)
                {
                    cypher_message = AES.encrypt(SET_KEY.getText(), message);
                    i=1;
                }
                else
                {
                    cypher_message = DES.encrypt(SET_KEY.getText(), message);
                    i=2;
                }
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                cypher_key = getCypherKey();
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            String new_message = cypher_message+'\n'+cypher_key;
            
            escribemeArchivo(new_message,i);
            JOptionPane.showMessageDialog(null,"We´ve ended");
        }

    }//GEN-LAST:event_CypherActionPerformed

    private void Create_hashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Create_hashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Create_hashActionPerformed

    private void verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_verifyActionPerformed

    private void verifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verifyMouseClicked
        Verify.setVisible(true);
        CreateHash.setVisible(false);
        Create_hash.setSelected(false);
    }//GEN-LAST:event_verifyMouseClicked

    private void Create_hashMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Create_hashMouseClicked
        Verify.setVisible(false);
        CreateHash.setVisible(true);
        verify.setSelected(false);
    }//GEN-LAST:event_Create_hashMouseClicked

    private void CreateHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateHashActionPerformed
        String message="";
        try {
            message = Archivo.leerArchivo(getFilePath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String hash;
        
        hash= Hash.getSha(message);
        
        String new_message="";
        new_message+=message+"\n";
        new_message+=hash;
        
        try {
            Archivo.escribirArchivo(new_message, getNameSalida(5));
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JOptionPane.showMessageDialog(null,"We´ve create the file called integridad.txt successfully");
    }//GEN-LAST:event_CreateHashActionPerformed

    private void VerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerifyActionPerformed
        try {
            if(Hash.verifySha(getFilePath()))
                JOptionPane.showMessageDialog(null,"Correct!!");
            else
                JOptionPane.showMessageDialog(null,"The file has been modified!!");
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_VerifyActionPerformed

    public boolean isEmpty() throws NoSuchAlgorithmException, Exception
    {
        if(SET_KEY.getText().equalsIgnoreCase(""))
        {
                String key = File_Reader.getKeyFromFile(getFilePath(),RSA.cargarPrivada(getPublicKeyPath()));
                JOptionPane.showMessageDialog(null,"The key that you must use is: "+key+" anyway I´m going to write it in the console");
                System.out.println(key);
                return true;
        }
        else
            return false;
    }
    
    private void CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckActionPerformed
        String decrypted = null;
        String message=null;
        String hash = null,cypher_hash;
        int i=0;
        try {
            message = File_Reader.ReadTextNDKey(getFilePath()).get(0).toString();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /***********************************************************************************************/
        if(C.isSelected() && !I.isSelected() && !A.isSelected())
        {
            try {
                if(!isEmpty())
                {
                    if(jComboBox1.getSelectedIndex()==0)
                    {
                        decrypted = AES.decrypt(SET_KEY.getText(), message);
                        i=3;
                    }
                    else
                    {
                        decrypted = DES.decrypt(SET_KEY.getText(), message);
                        i=4;
                    }
                    
                    try {
                    Archivo.escribirArchivo(decrypted, getNameSalida(i));
                    JOptionPane.showMessageDialog(null,"We have ended, check the outútfile");
                } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
        /***********************************************************************************************/
        
        /***********************************************************************************************/
        if(!C.isSelected() && I.isSelected() && A.isSelected())
        {
            try {
                message = File_Reader.ReadTextNDKey(getFilePath()).get(0).toString();
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                hash = File_Reader.getHashFromFile(getFilePath(),RSA.cargarPublica(getPrivateKeyPath()));
            } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            message = message.replaceAll("\n","");
            String new_hash = Hash.getSha(message);

            if(new_hash.equalsIgnoreCase(hash))
                JOptionPane.showMessageDialog(null,"Correct text!");
            else
                JOptionPane.showMessageDialog(null,"The text has been modified!");
        }
        /************************************************************************************************/
        
        /*************************************************************************************************/
        if(C.isSelected() && I.isSelected() && A.isSelected())
        {
            try {
                if(!isEmpty())
                {
                    if(jComboBox1.getSelectedIndex()==0)
                    {
                        decrypted = AES.decrypt(SET_KEY.getText(),message);
                        i=3;
                    }
                    else
                    {
                        decrypted = DES.decrypt(SET_KEY.getText(),message);
                        i=4;
                    }
                    
                    message = File_Reader.separateTextNDHash(decrypted).get(0).toString();
                    message = message.replaceAll("\n","");
                    cypher_hash = File_Reader.separateTextNDHash(decrypted).get(1).toString(); 
                    hash = RSA.fromByteToString(RSA.decrypt(RSA.cargarPublica(getPrivateKeyPath()), RSA.fromStringToByte(cypher_hash)));
                    String new_hash = Hash.getSha(message);
                    
                    if(new_hash.equalsIgnoreCase(hash))
                        JOptionPane.showMessageDialog(null,"Correct!");
                    else
                        JOptionPane.showMessageDialog(null,"The message has been modify!");
                    
                    Archivo.escribirArchivo(message, getNameSalida(i));
                    JOptionPane.showMessageDialog(null,"Check the output");
                }
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        /************************************************************************************************/
        
        /************************************************************************************************/
        if(C.isSelected() && I.isSelected() && !A.isSelected())
        {
            try {
                if(!isEmpty())
                {
                    if(jComboBox1.getSelectedIndex()==0)
                    {
                        decrypted = AES.decrypt(SET_KEY.getText(),message);
                        i=3;
                    }
                    else
                    {
                        decrypted = DES.decrypt(SET_KEY.getText(),message);
                        i=4;
                    }
                    
                    if(Hash.verifySha2(decrypted))
                        JOptionPane.showMessageDialog(null,"Correct!!");
                    else
                        JOptionPane.showMessageDialog(null,"The text has been modified!!");
                    
                    Archivo.escribirArchivo(decrypted, getNameSalida(i));
                }
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        /*************************************************************************************************/
    }//GEN-LAST:event_CheckActionPerformed

    public void setPublicKeyPath(String path){ this.public_key_path=path;}
    
    public void setPrivateKeyPath(String path){ this.private_key_path=path;}
    
    public void setFilePath(String path){this.file_path=path; }
    
    public String getPublicKeyPath(){return this.public_key_path;}
    
    public String getPrivateKeyPath(){return this.private_key_path;}
    
    public String getFilePath(){return this.file_path;}
    
    public String getNameSalida(int n)
    {
        if(n==1)
            return path_mensaje+"\\m_AESE.txt";
        else if(n==2)
            return path_mensaje+"\\m_DESE.txt";
        else if(n==3)
            return path_mensaje+"\\m_AESD.txt";
        else if(n==4)
            return path_mensaje+"\\m_DESD.txt";
        else if(n==5)
            return path_mensaje+"\\integridad.txt";
        else
            return path_mensaje+"\\integridadD.txt";
    }
    
    
    /**
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     * @throws java.lang.InstantiationException
     * @throws java.lang.IllegalAccessException
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        try {
            //</editor-fold>
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton A;
    private javax.swing.JLabel B1;
    private javax.swing.JLabel B2;
    private javax.swing.JLabel B3;
    private javax.swing.JLabel BG1;
    private javax.swing.JLabel BG2;
    private javax.swing.JRadioButton C;
    private javax.swing.JButton Check;
    private javax.swing.JButton CreateHash;
    private javax.swing.JRadioButton Create_hash;
    private javax.swing.JButton Cypher;
    private javax.swing.JRadioButton Decrypt;
    private javax.swing.JRadioButton Encrypt;
    private javax.swing.JButton Exit;
    private javax.swing.JRadioButton I;
    private javax.swing.JLabel Name1;
    private javax.swing.JLabel Name2;
    private javax.swing.JLabel SELECT_FILE;
    private javax.swing.JLabel SELECT_KEY;
    private javax.swing.JLabel SELECT_KEY1;
    private javax.swing.JLabel SEL_ALGORITHM;
    private javax.swing.JTextField SET_KEY;
    private javax.swing.JButton Select;
    private javax.swing.JButton Select_key;
    private javax.swing.JButton Select_key1;
    private javax.swing.JLabel Select_services;
    private javax.swing.JButton Verify;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JRadioButton verify;
    // End of variables declaration//GEN-END:variables

    private String getFilePAth() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
